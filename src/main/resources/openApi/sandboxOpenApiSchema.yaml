openapi: 3.0.0
info:
  title: API for Exadel budget application
  description: OpenAPI schema of budget application
  version: 1.0.0
tags:
  - name: User Management
paths:
  /users/login:
    post:
      summary: LogIn
      description: As a User I want to to have a login functionality so that I can get an access to my User account
      tags:
        - User Management
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
        description: DTO for User entity
        required: true
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
                example: Bearer 123
              description: JWT Authorization header using the Bearer scheme
        '401':
          description: Invalid Email or Password
          content:
            application/json:
              schema:
                type: string
                example: Invalid Email or Password
      security: []

  /users/logout:
    get:
      summary: Logout of the user with JWT de-activation
      tags:
        - User Management
      operationId: userLogout
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout is succesfull
        '500':
          description: Internal server error, could not process logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error, please try again

  /users/{userId}:
    get:
      summary: Fetch User information by userId
      tags:
        - User Management
      operationId: userGet
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID for data deletion
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        '403':
          description: Unauthorized to access current resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not allowed to view current page, please contact system administrator
        '500':
          description: Internal server error, could not process request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error, please try again
    delete:
      summary: All user data is deleted (wallets and transactions). User entity is NOT deleted from database
      tags:
        - User Management
      operationId: deleteUserDataById
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID for data deletion
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account is succesfully deleted
        '204':
          description: Content (user) not found in databse
          content:
            application/json:
              schema:
                type: string
                example: No such user found in database
      security: []

components:
  schemas:
    UserResponseDto:
      type: object
      properties:
        username:
          type: string
        walletDto:
          type: array
          items:
            type: string
      x-examples:
        example-1:
          username: user@exadel.com
          password: User
    UserLoginDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      x-examples:
        example-1:
          username: user@exadel.com
          password: User
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT Authorization header using the Bearer scheme
security:
  - bearerAuth: []
